; this writes bytes to stream
; content bytes are shifted one nybble (due to the mode nybble)
; padding and ecc bytes are written 1:1, thanks due to filling up the last content byte



bytes_to_stream
; calculate start address of datastream (matrix end)
    clc
    lda #<data
    adc #<matrixSize
    sta z_location
    
    lda #>data
    adc #>matrixSize
    sta z_location+1

; write mode byte and first nybble of length byte
    ldx #z_location
    stx $02b9
    ldy #0
    sta z_counter1    ;counter1 holds the datastream index (ie write index)

    lda #0
    sta z_counter2    ;counter2 holds the input index (ie read index) (stop-condition: cmp contentLength)
        
    lda #64
    sta z_temp
    ldx #0
    jsr k_indsta
    
    lda contentLength
    jsr writeToStream

; write content bytes
-   ldx #0
    ldy z_counter2
    lda #z_location2
    jsr k_indfet
    
    jsr writeToStream
    iny 
    cpy contentLength
    beq +           ; all content written to stream. continue
    
    sty z_counter2  ; else: increase read index and continue with next character
    jmp -
    
    ; write last byte. lower nybble is left to zero
+   ldx #0
    ldy z_counter1
    jsr k_indsta    ;Acc should still hold z_temp, $02b9 should still hold z_location
    iny
    sty z_counter1

; write padding bytes 0xEF 0x11. length is streamlength - contentlength - ecclength (eg 134-98-26=10)
    sec
    lda streamLength
    sbc contentLength
    sbc eccLength
    beq +             ;if length of padding bytes is zero, skip this part.
    
    sta z_counter2    ;store padding length in counter
    

    ;y should still be current with z_counter1 at the position of the last content byte
-   ldx #0
    lda #$ef
    jsr k_indsta
    iny
    dec z_counter2

    ldx #0
    lda #$11
    jsr k_indsta
    iny
    dec z_counter2
    
    bbp -
    
    
+   rts
    
    
    
writeToStream
    ;write upper nybble of current value to lower nybble of current stream-byte
    ; so we need to OR  the current value with the current stream-byte
    pha       ;put A on stack so we can recover the value after shifting right
    
    lsr
    lsr
    lsr
    lsr
    ora z_temp
    
    ldx #0
    ldy z_counter1
    ; a holds the ORed value
    ; $02b9 still holds z_location
    jsr k_indsta
    
    inc z_counter1
    
    ;now shift left, so we can store the lower nybble of the value as the upper nybble of the next stream-byte
    pla
    asl
    asl
    asl
    asl
    sta z_temp
    
    rts
    
    
    
    
    
    
    
    