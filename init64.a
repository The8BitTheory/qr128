

; this calculates all sizes according to the length of the content
; accumulator holds length
; x holds bank 1 address lb
; y holds bank 1 address hb
init
!zone init


    ; input address for petscii-to-ascii conversion    
    stx z_location
    sty z_location+1

    ; output address for petscii-to-ascii conversion
    ldx #<data
    stx z_location2
    ldx #>data
    stx z_location2+1
    
    ; clear memory area that's to be used
    ; for version4 codes (33x33) that's 1089 bytes for the matrix
    ;  plus 136 bytes for datastream and export processing
    lda #0
    ldx #0
-   sta data,x
    sta data+256,x
    sta data+512,x
    sta data+768,x
;    sta data+1024,x
    inx
    bne -
    
    ldx #200
-   sta data+1024,x
    dex
    bne -
    
    lda contentLength
        
;calculate version.
    ; decreasing the version boundaries by one byte, because of mode and length bits (eg lower than 108)
    ; max supported version is 5 -> 108 bytes -2=106
    cmp #18
    bcs +
    lda #21
    sta size
    lda #<441
    sta matrixSize
    lda #>441
    sta matrixSize+1
    lda #7
    sta eccLength
    lda #26
    sta streamLength
    lda #0
    sta rsDivisorOffset
    jmp ++
    
+   cmp #33
    bcs +
    lda #25
    sta size
    lda #<625
    sta matrixSize
    lda #>625
    sta matrixSize+1
    lda #10
    sta eccLength
    lda #44
    sta streamLength
    lda #7
    sta rsDivisorOffset
    jmp ++
    
+   cmp #54
    bcs +
    lda #29
    sta size
    lda #<841
    sta matrixSize
    lda #>841
    sta matrixSize+1
    lda #15
    sta eccLength
    lda #70
    sta streamLength
    lda #17
    sta rsDivisorOffset
    jmp ++
    
+   cmp #79
    bcs +
    lda #33
    sta size
    lda #<1089
    sta matrixSize
    lda #>1089
    sta matrixSize+1
    lda #20
    sta eccLength
    lda #100
    sta streamLength
    lda #32
    sta rsDivisorOffset
    jmp ++
    
    ;input buffer on the c64 and vic20 is 88 characters, so we can't input content of this length
;+   cmp #107
;    bcs +
;    lda #37
;    sta size
;    lda #<1369
;    sta matrixSize
;    lda #>1369
;    sta matrixSize+1
;    lda #26
;    sta eccLength
;    lda #134
;    sta streamLength
;    lda #52
;    sta rsDivisorOffset
;    jmp ++

; content too long for this    
+   ldx #0
    ;sec
-   lda .too_long,x
    beq +
    jsr $ffd2
    inx
    jmp -
    
    
; done
+   sec
++  rts

.too_long  !pet "content is too long.",0
