; this calculates all sizes according to the length of the content
; accumulator holds length
; x holds bank 1 address lb
; y holds bank 1 address hb

k_primm   = $ff7d; works for c128 and mega65

init
!zone init
    sta contentLength
    
    ; input address for petscii-to-ascii conversion
    stx z_location
    sty z_location+1
    
    ; save zero-page values for later recovery
    ldy z_counter1
    sty m_zpa1
    ldy z_counter1+1
    sty m_zpa1+1
    
    ldy z_counter2
    sty m_zpa2
    ldy z_counter2+1
    sty m_zpa2+1
    
    ldy z_location3
    sty m_zpa3
    ldy z_location3+1
    sty m_zpa3+1

!if find_var = 0 {
    ; if find_var is true, then z_temp has been saved in var.a already
    ldy z_temp
    sty m_zpa4
    ldy z_temp+1
    sty m_zpa4+1
}
    
    
    ; output address for petscii-to-ascii conversion
    ldx #<data
    stx z_location2
    ldx #>data
    stx z_location2+1
        
;calculate version.
    ; decreasing the version boundaries by one byte, because of mode and length bits (eg lower than 108)
    ; max supported version is 5 -> 108 bytes -2=106
    cmp #18
    bcs +
    lda #21
    sta size
    lda #<441
    sta matrixSize
    lda #>441
    sta matrixSize+1
    lda #7
    sta eccLength
    lda #26
    sta streamLength
    lda #0
    sta rsDivisorOffset
    jmp ++
    
+   cmp #33
    bcs +
    lda #25
    sta size
    lda #<625
    sta matrixSize
    lda #>625
    sta matrixSize+1
    lda #10
    sta eccLength
    lda #44
    sta streamLength
    lda #7
    sta rsDivisorOffset
    jmp ++

!if max_version > 2 {    
+   cmp #54
    bcs +
    lda #29
    sta size
    lda #<841
    sta matrixSize
    lda #>841
    sta matrixSize+1
    lda #15
    sta eccLength
    lda #70
    sta streamLength
    lda #17
    sta rsDivisorOffset
    jmp ++
}

!if max_version > 3 {
+   cmp #79
    bcs +
    lda #33
    sta size
    lda #<1089
    sta matrixSize
    lda #>1089
    sta matrixSize+1
    lda #20
    sta eccLength
    lda #100
    sta streamLength
    lda #32
    sta rsDivisorOffset
    jmp ++
}
    
!if max_version > 4 {
+   cmp #107
    bcs +
    lda #37
    sta size
    lda #<1369
    sta matrixSize
    lda #>1369
    sta matrixSize+1
    lda #26
    sta eccLength
    lda #134
    sta streamLength
    lda #52
    sta rsDivisorOffset
    jmp ++
}

; content too long for this
!if knows_primm {
+   jsr k_primm

} else {

+   ldx #0
-   lda .too_long,x
    beq .end
    jsr $ffd2
    inx
    jmp -
}
.too_long  !pet "content is too long.",0

; done
.end
    sec
++  rts


