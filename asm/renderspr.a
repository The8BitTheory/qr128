; mega65:
;  this renders the qr-code to a 64-pixel wide vic-iv sprite.
; c128-vdc:
;  this renders the qr-code to pixel-data.
;   not really a sprite, as that would be limited to 24 pixels (or so).
;   vdc doesn't support sprites anyways.
;   aiming towards Walrus Basic 8 structure and pattern.

;  eg marinetraffic.com/en/ais/details/ships/mmsi:207072329
;  results in a v3 code. 29 characters -> 4 bytes wide
; else:
;  not implemented yet

; z_location contains the pointer to read from
; z_location2 is the pointer to write the sprite pixels to.

; bank of input string
; address of input string
; bank of pixel output
; address of pixel output


k_jindsta = $ff77

renderspr

!zone render
z_sprite_bit    = z_counter1
z_sprite_byte   = z_counter1+1
z_sprite_offset = z_counter2

    jsr set_location_to_data
    ldy #0                    ;y holds the read-column (reset to zero after eol is reached)
    sty .m_column
    sty z_sprite_offset
    
    lda #%00100000
    jsr .reset_sprite_byte

!if target="mega65" {    
    ; On the MEGA65 z_zp4 will hold the value of spriteOut times 64
    sty z_zp4
    sty z_zp4+1
    sty z_zp4+2
    sty z_zp4+3

    ; calculate sprite address, based on 16-bit sprite-index
    ldx spriteOut
-   clc
    lda z_zp4
    adc #$40
    sta z_zp4
    bcc +
    lda z_zp4+1
    adc #0
    sta z_zp4+1
    bcc +
    inc z_zp4+2
    
+   dex
    bne -
    lda spriteOut+1
    beq +
    dec spriteOut+1
    jmp -
} else if target="c128" {
    ;z_zp4 = z_location2 output address low-byte (and high-byte at +1)
    ;z_location3 = output bank
    lda m_pixeltarget
    sta z_location2
    lda m_pixeltarget+1
    sta z_location2+1

    z_zp4=z_location2
    
}

; store z_zp4 for later return to caller. current value will be changed.
+   lda z_zp4
    sta m_l3
    lda z_zp4+1
    sta m_l3+1
    lda z_zp4+2
    sta m_l3+2

    
    ;clear memory area
    lda #0
!if target = "mega65" {
; mega65 can use z-register to define bank

    ldz #0
-   sta [z_zp4],z
    dez
} else if target = "c128" {
; c128 needs to call JINDSTA method to write to specific bank
    ;$02b9 points to zp-pointer -> z_location2
    ; acc = value to be stored (preserved)
    ; x = bank number -> m_l3+2
    ; y = offset to address in zp-pointer (preserved)

    ldy #z_zp4
    sty $02b9

    ldy #0
-   ldx z_location3
    jsr k_jindsta
    dey

} else {
; c64 and vic20 just write to regular memory
; x16 might need writing to vram directly
    ; not implemented yet
}
    bne -

; start writing pixels after two rows (8 bytes for each row)
    clc
    lda z_zp4
!if target="mega65" {
    adc #16
} else if target="c128" {
    adc #8
}
    sta z_zp4
    bcc .handle_col
    inc z_zp4+1
        
.handle_col
    ldy .m_column
    lda (z_location),y
    bit .m_64   ;is xor-bit set?
    bvc .write_value  ;branch if this bit is not xored
    
    pha
    and #1
    sta z_temp
    pla
    and m_maskbit
    bne +
    lda #0
    jmp ++
+   lda #1
++  eor z_temp
    
.write_value
    bit .m_one
    beq +

    ;ldx #32             ; black module (prints space)
                        ; don't need to do anything for sprite here (as bits are 0 already)
;    jmp ++

    ;ldx #160            ; white module (prints inverse space)
    lda z_sprite_byte
    ora z_sprite_bit
    sta z_sprite_byte   ; collect module for sprite byte

+   iny
    sty .m_column
    lda z_sprite_bit    ; shift bit to the right
    clc
    lsr
    sta z_sprite_bit
    bcc +               ; carry flag not set (ie sprite byte not full)
    
    ; if sprite bit is zero (carry flag set), sprite byte is full
    jsr .write_sprite_byte
    lda #%10000000
    jsr .reset_sprite_byte
    
    ;move on
+   cpy size
    bne .handle_col
    
    ; finish line
    ldy #0
    sty .m_column
    jsr .inc_line2
    jsr inc_line    
    cmp m_endAddress    ;needs to have z_location in accumulator
    beq .end
    jmp .handle_col

.end
    rts
    
    
.inc_line2    
    jsr .write_sprite_byte
    lda #0
    sta z_sprite_offset
    lda #%00100000
    jsr .reset_sprite_byte
    clc
    lda z_zp4
!if target="mega65" {
    adc #8
} else if target="c128" {
    adc #4
}
    sta z_zp4
    bcc +
    inc z_zp4+1

+   rts

.reset_sprite_byte
    sta z_sprite_bit            ;used to keep track of bit    
    lda #0
    sta z_sprite_byte            ;used to collect the byte value for 8 modules each
    rts

.write_sprite_byte
    ;sty z_temp

    lda z_sprite_byte
    
!if target="mega65" {
    ldz z_sprite_offset    
    sta [z_zp4],z
    
} else if target="c128" {
; c128 needs to call JINDSTA method to write to specific bank
    ;$02b9 points to zp-pointer -> z_location2
    ; acc = value to be stored (preserved)
    ; x = bank number -> m_l3+2
    ; y = offset to address in zp-pointer (preserved)
    
    ldy z_sprite_offset
    ldx z_location3
    jsr k_jindsta

} else {
;c64, vic20, x16
    
}
    inc z_sprite_offset

    ;ldy z_temp
    rts

.m_one          !byte 1
.m_64           !byte 64
.m_column       !byte 0
m_l3            !byte 0,0,0
m_pixeltarget        !byte 0,0