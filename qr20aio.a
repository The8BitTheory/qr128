
!to "qr20aio.prg",cbm

z_location  = $fb     ;$fa-$fb for storing indexed addresses
z_location2 = $fd     ;$fc-$fd for storing indexed addresses
z_temp      = $02
z_counter1  = $08     ;ENDCHR
z_counter2  = $0a     ;VERCK

*= $1000
    
    ;!byte $00,$22,$10,$0a,$00,$54,$24,$b2,$22,$48,$54,$54,$50,$53,$3a,$2f
    ;!byte $2f,$57,$57,$57,$2e,$46,$4f,$52,55,$4d,$36,$34,$2e,$44,$45,$2f
    ;!byte $22,$00,$33,$10,$14,$00,$97,$20,$37,$38,$30,$2c,$c6,$28,$22,$54
    ;!byte $22,$29,$00,$3e,$10,$1e,$00,$9e,$20,$34,$31,$36,$30,$00,$00,$00
    
    
    !byte $00,$22,$10,$0a,$00,$54,$24,$b2,$22,$48,$54,$54,$50,$53,$3a,$2f
    !byte $2f,$57,$57,$57,$2e,$46,$4f,$52,$55,$4d,$36,$34,$2e,$44,$45,$2f
    !byte $22,$00,$3b,$10,$0f,$00,$97,$33,$36,$38,$37,$39,$2c,$31,$3a
    !byte $97,$36,$34,$36,$2c,$31,$3a,$99,$22,$93
    !byte $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11
    !byte $22,$00,$4d,$10
    !byte $14,$00,$97,$20,$37,$38,$30,$2c,$c6,$28,$22,$54
    !byte $22,$29,$00,$57,$10,$1e,$00,$9e,$20
    !byte $34,$32,$30,$37,$3a,$9e,$34,$32,$31,$33
    !byte $00,$00,$00

start
    jsr init
    jmp +
    jmp render
    ;---end
    
+   jsr p2a
    jsr bytes_to_stream
    jsr calc_xor_masks
    jsr rs
    jsr write_patterns
    jsr stream_to_module

    lda size
    ldx #<data
    ldy #>data
    
    rts
    
size            !byte 0   ;size of one axis-length of the final matrix
contentLength   !byte 0
eccLength       !byte 0   ;nr of ecc bytes to generate
streamLength    !byte 0
matrixSize      !byte 0,0 ;size of the matrix in modules (1 byte per module)
rsDivisorOffset !byte 0
m_xpos          !byte 0
m_ypos          !byte 0

!source "common.a"
!source "init64.a"
!source "p2asb.a"           ; reads petscii bytes from z_location and writes ascii to z_location2 (which is matrix-start)
!source "bytes2stream.a"    ; reads ascii from z_location2 and writes into datastream at z_location (=data+matrix_size)
                            ; z_counter1 holds the right offset for rs.a to continue using it.
!source "masks.a"           ; this clears the matrix memory area and calculates all the xor-masks
!source "rs.a"              ; reads content bytes from datastream (z_location) and writes ecc bytes to 
                            ; z_location2(=z_location + z_counter1)
!source "patterns.a"        ; this writes timing, alignment, finder patterns etc.
!source "stream2module.a"
!source "render2.a"


data    !byte 0