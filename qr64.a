
!to "qr64.bin.prg",cbm

z_location  = $fb     ;$fa-$fb for storing indexed addresses
z_location2 = $fd     ;$fc-$fd for storing indexed addresses
z_temp      = $02
z_counter1  = $08     ;ENDCHR
z_counter2  = $0a     ;VERCK

*= $C000

    jsr init
;    jmp +
;    jmp render
    ;---end
    
    jsr p2a
    jsr bytes_to_stream
    jsr calc_xor_masks
    jsr rs
    jsr write_patterns
    jsr stream_to_module
    
    ;set screenram
    lda #$0
    sta z_location2
    lda $0288
    sta z_location2+1
    ;set linesize (use rsDivisorOffset because we don't need it any longer at this stage)
    ldx $d5
    inx
    stx rsDivisorOffset
    jsr render

    lda size
    ldx #<data
    ldy #>data
    
    rts
    
size            !byte 0   ;size of one axis-length of the final matrix
contentLength   !byte 0
eccLength       !byte 0   ;nr of ecc bytes to generate
streamLength    !byte 0
matrixSize      !byte 0,0 ;size of the matrix in modules (1 byte per module)
rsDivisorOffset !byte 0
m_xpos          !byte 0
m_ypos          !byte 0

!source "common.a"
!source "init64.a"
!source "p2asb.a"           ; reads petscii bytes from z_location and writes ascii to z_location2 (which is matrix-start)
!source "bytes2stream.a"    ; reads ascii from z_location2 and writes into datastream at z_location (=data+matrix_size)
                            ; z_counter1 holds the right offset for rs.a to continue using it.
!source "masks.a"           ; this clears the matrix memory area and calculates all the xor-masks
!source "rs.a"              ; reads content bytes from datastream (z_location) and writes ecc bytes to 
                            ; z_location2(=z_location + z_counter1)
!source "patterns.a"        ; this writes timing, alignment, finder patterns etc.
!source "stream2module.a"
!source "render2.a"


data    !byte 0