
!to "qr.bin.prg",cbm

k_indfet  = $ff74
k_indsta  = $ff77
k_primm   = $ff7d


z_location  = $fa     ;$fa-$fb for storing indexed addresses
z_location2 = $fc     ;$fc-$fd for storing indexed addresses
z_temp      = $fe
z_counter1  = $0a     ;ENDCHR
z_counter2  = $0c     ;VERCK

*= $1300
;*= $C000

    jmp init
    jmp p2a
    jmp bytes_to_stream
    jmp calc_xor_masks
    jmp rs
    jmp write_patterns
    jmp stream_to_module
    jmp showdata
    
    rts
    
showdata
    lda #<data
    sta $03e8
    lda #>data
    sta $03e9
    
    lda size
    sta $03ea
    
    rts
    
set_location_datastream
    clc
    lda #<data
    adc matrixSize
    sta z_location
    
    lda #>data
    adc matrixSize+1
    sta z_location+1
    
    rts
    
set_location_to_data
    lda #<data
    sta z_location
    lda #>data
    sta z_location+1
    rts
    
inc_line
    lda z_location
    clc
    adc size
    sta z_location
    bcc +
    inc z_location+1
    
+   rts
    
size            !byte 0   ;size of one axis-length of the final matrix
contentLength   !byte 0
eccLength       !byte 0   ;nr of ecc bytes to generate
streamLength    !byte 0
matrixSize      !byte 0,0 ;size of the matrix in modules (1 byte per module)
rsDivisorOffset !byte 0
;counter1        !byte 0
;counter2        !byte 0

!source "init.a"
!source "p2a.a"             ; reads petscii bytes from z_location and writes ascii to z_location2 (which is matrix-start)
!source "bytes2stream.a"    ; reads ascii from z_location2 and writes into datastream at z_location (=data+matrix_size)
                            ; z_counter1 holds the right offset for rs.a to continue using it.
!source "masks.a"           ; this clears the matrix memory area and calculates all the xor-masks
!source "rs.a"              ; reads content bytes from datastream (z_location) and writes ecc bytes to 
                            ; z_location2(=z_location + z_counter1)
!source "patterns.a"        ; this writes timing, alignment, finder patterns etc.
!source "stream2module.a"


data    !byte 0